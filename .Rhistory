#     that can cache its inverse.
# 2.) "cacheSolve": This function computes the inverse of the special "matrix"
#     returned by makeCacheMatrix above. If the inverse has already been calculated
#     (and the matrix has not changed), then cacheSolve should retrieve the inverse
#     from the cache.
#
#________________
#1.)  This function sets the value of the matrix, gets the value of the matrix,
#     sets the value of the inverse, then gets the value of the inverse. Ultimately
#     creating a list of functions that caches the inverse of the input matrix.
library("tidyverse")
makeCacheMatrix <- function(x = matrix()){
inv = NULL
set = function(y){
x <<- y
inv = NULL
}
get = function() x
setInv = function(inverse) inv <<- inverse
getInv = function() inv
list(set = set,
get = get,
setInv = setInv,
getInv = getInv)
}
#2.)  This function will check to see if the output of the above function has
#     cached previously, and if it has, it will return the inverse of the input.
#     If the output of the first function has not been cached it will move
#     forward and calculate the inverse of the matrix data supplied.
cacheSolve <- function(x, ...){
inv = x$getInv()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
matrix.data = x$get()
inv = solve(matrix.data, ...)
x$setInv
return(inv)
}
